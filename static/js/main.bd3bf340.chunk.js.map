{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","CashSupport","InteractiveMap","id","Map","center","zoom","TileLayer","url","attribution","GeoJSON","data","countries","onEachFeature","feature","layer","properties","name","programs","buffer","progArray","i","length","item","Website","Name","Affiliations","Services","bindPopup","className","filter","hasOwnProperty","Resources","AppRouter","react_router_dom","to","process","type","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd3bf340.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from 'react-dom'\nimport { Map, Marker, Popup, TileLayer ,GeoJSON} from 'react-leaflet'\nimport './App.css';\nimport countries from './countries.json';\nimport programs from './refugeeprograms.json';\nimport $ from 'jquery';\n\n\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nfunction About() {\n  return (<h2>About</h2>);\n}\n\nfunction CashSupport() {\n  return <h2>Users</h2>;\n}\n\n\nfunction InteractiveMap() {\n\n  {/* A JSX comment\n\n  function clickToFeature(feature){\n    if (feature.properties && feature.properties.name) {\n      return $('#sidebar').append(\"<div id='locale'>\"+feature.properties.name+\"</div>\")\n    }\n  }\n\n  function onEachFeature(feature, layer){\n    layer.on({\n      click: this.clickToFeature\n    });\n    }\n\n    */}\n\n\n\n    function onEachFeature(feature, layer) {\n      if (feature.properties && feature.properties.name && programs[feature.properties.name]) {\n\n        var buffer = ''\n        var progArray = programs[feature.properties.name]\n          for (var i = 0; i < progArray.length; i++) {\n            var item = progArray[i];\n\n            if(item.Website != \"\"){\n              buffer += \" <li><a href=\" + item.Website + \">\" + item.Name + \"</a><ul>\";\n            }else{\n              buffer += \" <li>\" + item.Name + \"<ul>\";\n            }\n\n            if(item.Affiliations != \"\"){\n              buffer+=\"<li>Affiliations : \" + item.Affiliations + \"</li>\"\n            }\n            if (item.Services != \"\") {\n              buffer+=\"<li>Services : \" + item.Services + \"</li>\"\n\n            }\n            buffer+=\"</ul></li>\"\n          }\n\n\n        // specify popup options\n        var customOptions =\n            {\n            'className' : 'custom'\n            }\n\n        layer.bindPopup(feature.properties.name+\"<ul>\"+buffer+\"</ul>\",customOptions);\n      }\n    }\n\n    function featureFilter(feature){\n      if (programs.hasOwnProperty(feature.properties.name)){\n        return true\n      }\n    }\n\n  return (\n      <div>\n      <div id=\"sidebar\"></div>\n      <Map id=\"map\" center={[0.0, -0.0]} zoom={3}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n        <GeoJSON data={countries} onEachFeature={onEachFeature} filter={featureFilter}/>\n      </Map>\n      </div>\n  )\n}\n\nfunction Resources() {\n  return <h2>Home</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <nav className = \"navigation\">\n          <div className = \"title\"><span>Sustainable Livelihoods and Cash Support <br></br>for Refugees Around the World</span></div>\n          <div className=\"btn-group\">\n            <Link to={process.env.PUBLIC_URL + \"/resources/\"}><button id=\"link\" type=\"button\">Resources for Lawyers and NGOs</button></Link>\n            <Link to={process.env.PUBLIC_URL + \"/map/\"}><button id=\"link\" type=\"button\">Interactive Map</button></Link>\n            <Link to={process.env.PUBLIC_URL + \"/cashsupport/\"}><button id=\"link\" type=\"button\">Why Cash-based Support</button></Link>\n            <Link to={process.env.PUBLIC_URL + \"/about\"}><button id=\"link\" type=\"button\">About Us</button></Link>\n          </div>\n        </nav>\n\n        <Switch>\n        <Route path={process.env.PUBLIC_URL + \"/about\"} component={About} />\n        <Route path={process.env.PUBLIC_URL + \"/cashsupport/\"} component={CashSupport} />\n        <Route path={process.env.PUBLIC_URL + \"/map/\"} exact component={InteractiveMap} />\n        <Route path={process.env.PUBLIC_URL + \"/resources/\"} exact component={Resources} />\n          <Route path=\"*\" component={About}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}